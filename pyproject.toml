[build-system]
requires = [
    "pdm-pep517>=1.0",
]
build-backend = "pdm.pep517.api"

[project]
name = "pycodegen"
version = "0.2.5"
description = "Python Code Generator"
authors = [
    { name = "Myron Tuttle", email = "myrongt@gmail.com" },
]
requires-python = ">=3.9"
readme = "README.md"
keywords = []
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "GitPython>=3.1.31",
    "PyGithub>=1.58.0",
    "click>=8.1.3",
    "backoff>=2.2.1",
    "ratelimit>=2.2.1",
    "reretry>=0.11.8",
    "tomli>=2.0.1",
    "tiktoken>=0.3.2",
    "pathvalidate>=2.5.2",
    "openai>=0.27.4",
    "langchain>=0.0.149",
]

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://github.com/myrontuttle/pycodegen"

[project.scripts]
coder = "pycodegen.coder:code"

[tool.pdm.version]
source = "scm"

[tool.pdm.build]
package-dir = "src"
editable-backend = "editables"

[tool.pdm.dev-dependencies]
docs = [
    "sphinx>=6.1.3",
    "sphinx_rtd_theme>=1.2.0",
    "sphinx-autoapi>=2.0.1",
]
format = [
    "autoflake>=1.4",
    "end-of-file>=1.1.0",
    "black>=23.1",
    "isort>=5.10",
    "pyupgrade>=3.3.1",
]
quality = [
    "pre-commit>=3.0.4",
    "ruff>=0.0.260",
]
test = [
    "editables>=0.3",
    "pytest>=6.2",
    "pytest-cov>=3.0",
    "coverage[toml]>=7.2.0",
    "pytest-randomly>=3.10",
    "pytest-xdist>=2.4",
    "pytest-bdd>=6.1.1",
]
typing = [
    "mypy>=0.910",
]
security = [
    "bandit>=1.7.4",
    "ochrona>=2.0.2",
    "semgrep>=1.12.0",
]

[tool.black]
target-version = [
    "py39",
]
line-length = 79
color = true
exclude = "/(\n    \\.git\n    | \\.coverage\n    | \\.mypy_cache\n    | \\.pytest_cache\n    | \\.venv\n    | __pypackages__\n    | __pycache__\n    | _build\n    | build\n    | dist\n    | htmlcov\n)/\n"

[tool.isort]
py_version = 39
line_length = 79
multi_line_output = 3
force_single_line = false
balanced_wrapping = true
default_section = "THIRDPARTY"
known_first_party = "pycodegen"
include_trailing_comma = true
known_typing = [
    "typing",
    "types",
    "typing_extensions",
    "mypy",
    "mypy_extensions",
]
sections = [
    "FUTURE",
    "TYPING",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
profile = "black"
indent = 4
color_output = true

[tool.mypy]
python_version = 3.9
pretty = true
show_traceback = true
color_output = true
exclude = [
    "tests/fixtures/",
]
allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
norecursedirs = [
    "*.egg",
    ".eggs",
    ".env",
    ".git",
    ".tox",
    "build",
    "dist",
    "docs",
    "__pycache__",
    "__pypackages__",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py",
]
log_cli = true
addopts = [
    "--cov",
    "--cov-config pyproject.toml",
    "--strict-markers",
    "--tb=short",
    "--doctest-modules",
    "--doctest-continue-on-failure",
]
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
parallel = true
source = [
    "src",
    "tests",
]

[tool.coverage.paths]
equivalent = [
    "src",
    "__pypackages__",
]

[tool.coverage.report]
show_missing = true
precision = 2
omit = [
    "src/*/__init__.py",
    "src/*/__main__.py",
    "tests/*/__init__.py",
]

[tool.coverage.json]
output = "htmlcov/coverage.json"

[tool.ruff]
select = [
    "E",
    "F",
]
ignore = []
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "W",
]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
